//#include<iostream>
//using namespace std;
//#include<cmath>
///*求正整数N(1<N<1e9)的质因数的个数。 如120=2*2*2*3*5，共有5个质因数*/
///*
//为什么不用判断 j 是不是质数：因为任何一个合数都能被一个比它小的质数整除。
//所以当用小质数去分解这个合数时，已经把它的合数因子分解了。
//或者说
//如果出现了一个合数j ,能把数N整除，那显然在j 之前应该有一个质数 p < j 能把j 整除。
//而之前反复地用N 去除以 p，直到p不能再把 N 整除程序才往下执行，
//那怎么会后来又出现了 N 的一个合数因子j 能被p整除呢？这显然矛盾了。
//从而可以推出，程序中能把 N 整除的 j 都是质数。*/
//int main() 
//{
//    long N;
//    while (cin >> N)
//    {
//        int count = 0;
//        for (long j = 2; j <= sqrt(N); j++)//短除法
//        {
//            while (N % j == 0)
//            {
//                N = N / j;
//                count++;
//            }
//            if (N <= 1)//除到1，即分解完了
//                break;
//        }
//        if (N > 1)//本身是质数
//            count++;
//        cout << count << endl;
//    }
//    return 0;
//}