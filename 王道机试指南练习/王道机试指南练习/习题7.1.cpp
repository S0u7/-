//#include<iostream>
//#include<string>
//#include<vector>
//#include<algorithm>
//using namespace std;
///*代理服务器
//只有一个代理服务器，且访问服务器中有它，则无论如何都要自己代理自己，故-1
//当大于等于两台代理服务器时，遇到要访问自己，就可以来回倒着代理访问。*/
//int main()
//{
//	vector<string> agent, visit;
//	int n, m;
//	string temp;
//	while (cin >> n)
//	{
//		int i;
//		for (i = 0; i < n; i++)//输入代理服务器
//		{
//			cin >> temp;
//			agent.push_back(temp);
//		}
//		cin >> m;
//		for (i = 0; i < m; i++)//输入访问服务器顺序
//		{
//			cin >> temp;
//			visit.push_back(temp);
//		}
//		//pos:需要改变代理的服务器位置，count：改变次数
//		int pos = 0, count = 0;
//		//find函数查找的迭代器
//		vector<string>::iterator it, start = visit.begin(), flag;
//		//需要改变代理的服务器IP
//		string current = "";
//
//		//关键代码段
//		//当只有一台代理，且要访问自己时，无论如何都要自己代理自己
//		if (n == 1 && find(visit.begin(),visit.end(),agent[0]) != visit.end())
//			count = -1;
//		else
//		{
//			while (pos != visit.size())
//			{//每一趟查找在服务器中最后访问的代理服务器位置
//				for (i = 0; i < n; i++)
//				{
//					if (agent[i] != current)
//					{
//						it = find(start, visit.end(), agent[i]);
//						int p = it - visit.begin();//用int型判断大小(前后位置)
//						if (p > pos)
//						{
//							pos = p;
//							flag = it;
//						}
//					}
//					else
//						continue;
//				}
//				//下一趟查找从当前下个位置开始；查找除了当前IP的所有代理服务器位置
//				if (pos != visit.size())
//				{
//					start = ++flag;
//					current = visit[pos];
//					count++;
//				}
//			}
//		}
//		cout << count << endl;
//		agent.clear();
//		visit.clear();
//	}
//	return 0;
//}
///*
//3
//166.111.4.100
//162.105.131.113
//202.112.128.69
//12
//72.14.235.104
//166.111.4.100
//207.46.19.190
//202.112.128.69
//162.105.131.113
//118.214.226.52
//72.14.235.104
//166.111.4.100
//207.46.19.190
//202.112.128.69
//162.105.131.113
//118.214.226.52
//2
//5.68.139.167
//28.172.211.229
//5
//28.172.211.229
//5.68.139.167
//28.172.211.229
//5.68.139.167
//5.68.139.167
//2
//5.68.139.167
//28.172.211.229
//8
//28.172.211.229
//5.68.139.167
//28.172.211.229
//5.68.139.167
//5.68.139.167
//28.172.211.229
//5.68.139.167
//28.172.211.229
//8
//27.167.69.132
//54.168.142.218
//57.50.195.71
//58.177.11.246
//9.134.27.238
//18.243.112.70
//37.80.144.108
//33.2.1.12
//67
//27.167.69.132
//9.134.27.238
//18.243.112.70
//54.168.142.218
//9.134.27.238
//33.2.1.12
//58.177.11.246
//58.177.11.246
//9.134.27.238
//57.50.195.71
//54.168.142.218
//18.243.112.70
//37.80.144.108
//54.168.142.218
//9.134.27.238
//57.50.195.71
//27.167.69.132
//54.168.142.218
//54.168.142.218
//54.168.142.218
//27.167.69.132
//33.2.1.12
//27.167.69.132
//57.50.195.71
//18.243.112.70
//27.167.69.132
//57.50.195.71
//37.80.144.108
//33.2.1.12
//54.168.142.218
//58.177.11.246
//54.168.142.218
//27.167.69.132
//57.50.195.71
//58.177.11.246
//33.2.1.12
//57.50.195.71
//37.80.144.108
//27.167.69.132
//33.2.1.12
//9.134.27.238
//18.243.112.70
//58.177.11.246
//33.2.1.12
//57.50.195.71
//18.243.112.70
//58.177.11.246
//57.50.195.71
//33.2.1.12
//18.243.112.70
//37.80.144.108
//18.243.112.70
//9.134.27.238
//57.50.195.71
//9.134.27.238
//57.50.195.71
//37.80.144.108
//37.80.144.108
//57.50.195.71
//58.177.11.246
//18.243.112.70
//57.50.195.71
//18.243.112.70
//58.177.11.246
//33.2.1.12
//37.80.144.108
//37.80.144.108
//*/